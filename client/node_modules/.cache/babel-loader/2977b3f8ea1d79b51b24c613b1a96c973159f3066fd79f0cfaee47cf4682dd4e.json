{"ast":null,"code":"import * as api from '../api';\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: 'POST_QUESTION',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    dispatch({\n      type: 'FETCH_ALL_QUESTIONS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const voteQuestion = (id, value, userId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.voteQuestion(id, value, userId);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswered,\n      userId\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered, userId);\n    dispatch({\n      type: 'POST_ANSWER',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","getAllQuestions","deleteQuestion","id","voteQuestion","value","userId","postAnswer","answerData","noOfAnswers","answerBody","userAnswered","deleteAnswer","answerId"],"sources":["D:/projec/clone/stack-overflow/client/src/actions/question.js"],"sourcesContent":["import * as api from '../api' \r\n\r\nexport const askQuestion = (questionData,navigate) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.postQuestion(questionData)\r\n        dispatch({type:'POST_QUESTION',payload: data})\r\n        dispatch(fetchAllQuestions())\r\n        navigate('/')\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchAllQuestions = () => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.getAllQuestions();\r\n        dispatch({type: 'FETCH_ALL_QUESTIONS',payload: data});\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const deleteQuestion = (id,navigate) => async (dispatch) => {\r\n    try {\r\n        const {data} = api.deleteQuestion(id)\r\n        dispatch(fetchAllQuestions())\r\n        navigate('/')\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const voteQuestion = (id,value,userId) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.voteQuestion(id,value,userId)\r\n        dispatch(fetchAllQuestions())\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const postAnswer = (answerData) => async (dispatch) => {\r\n    try {\r\n      const { id, noOfAnswers, answerBody, userAnswered, userId } = answerData;\r\n      const { data } = await api.postAnswer(id,noOfAnswers,answerBody,userAnswered,userId);\r\n      dispatch({ type: 'POST_ANSWER', payload: data });\r\n      dispatch(fetchAllQuestions());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n};\r\n\r\nexport const deleteAnswer = (id,answerId, noOfAnswers) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.deleteAnswer(id,answerId,noOfAnswers)\r\n        dispatch(fetchAllQuestions())\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}